# encoding: utf-8
"""
XXXXXXXXX FIXME XXXXXXXXX Documentation description will go here. (Template file is processed by cmake to create the actual version information at build-time.)
All functions written here also should have docstrings.

I used the list in https://yade-dem.org/doc/installation.html#prerequisites
If we need a version of some library not listed in doc/sphinx/installation.rst, then it must also be added to that list!
"""

# all C++ functions are accessible now:
from yade._libVersions import *
import yade.config

def allVersionsCmake():
	"""
	This function returns library versions as provided by cmake during compilation.

	:return: dictionary in folowing format: ``{ "libName" : [ (major,minor,patch) , "versionString" ] }``

	.. note:: Please add here detection of other libraries when yade starts using them or if you discover how to extract from cmake a version which I didn't add here.

	"""

	return {
		  "cmake" : [ (${CMAKE_MAJOR_VERSION}, ${CMAKE_MINOR_VERSION}, ${CMAKE_PATCH_VERSION})   , '${CMAKE_VERSION}' ]
		, "vtk"   : [ (${VTK_MAJOR_VERSION}  , ${VTK_MINOR_VERSION}  , ${VTK_PATCH_VERSION})     , '${VTK_VERSION}'   ]
# uncomment when this bug is fixed in upstream: https://github.com/CGAL/cgal/issues/2820
#		, "cgal"  : [ (${CGAL_MAJOR_VERSION},${CGAL_MINOR_VERSION},${CGAL_BUGFIX_VERSION})   , '${CGAL_VERSION}'  ]
		}

def printAllVersions(rstFormat=False):
	"""
	This function prints a nicely formatted table with library versions.

	:param bool rstFormat: whether to print table using the reStructuredText formatting. Defaults to `False` and prints using `Gitlab markdown rules<https://gitlab.com/help/user/markdown>`_ so that it is easy to paste into gitlab discussions.

	As an example the table below actually reflects with what libraries this documentation was compiled:

	.. ipython::
	
	   In [1]: from yade.libVersions import *

	   In [1]: printAllVersions()

	"""

	# there will be three columns: library , cmake , C++
	headers  = ["library","cmake","C++"]
	longest  = [None,None,None]
	cmakeVer = allVersionsCmake()
	cppVer   = allVersionsCpp()
	namesSet = set()
	for i in range(3): longest[i] = len(headers[i])
	for key,val in cmakeVer.items():
		longest[0] = max(longest[0],len(key))
		if(len(val)==2):
			namesSet.add(key)
			longest[1] = max(longest[1],len(val[1]))
	for key,val in cppVer.items():
		longest[0] = max(longest[0],len(key))
		if(len(val)==2):
			namesSet.add(key)
			longest[2] = max(longest[2],len(val[1]))

	for i in range(3): longest[i]+=2

	sep = '| '+'-'*longest[0]+' | '+'-'*longest[1]+' | '+'-'*longest[2]+' |\n'
	lines="|"
	if(rstFormat):
		sep = '+-'+'-'*longest[0]+'-+-'+'-'*longest[1]+'-+-'+'-'*longest[2]+'-+\n'
		lines = sep.replace('-','=')+'\n|'
	# nice python formatting guide: https://pyformat.info/
	for i in range(3):
		lines+=" "+(('{:'+str(longest[i])+'}').format(headers[i]))+" |"
	lines+='\n'
	lines+=sep
	for libName in namesSet:
		lines+="| "+(('{:'+str(longest[0])+'}').format(libName))+" |"
		if (libName in cmakeVer) and (len(cmakeVer[libName])==2):
			lines+=" "+(('{:'+str(longest[1])+'}').format(cmakeVer[libName][1]))+" |"
		else:
			lines+=" "+(('{:'+str(longest[1])+'}').format(' '                 ))+" |"
		if (libName in cppVer) and (len(cppVer[libName])==2):
			lines+=" "+(('{:'+str(longest[2])+'}').format(cppVer[libName][1]  ))+" |"
		else:
			lines+=" "+(('{:'+str(longest[2])+'}').format(' '                 ))+" |"
		lines+='\n'
	print(lines)

"""
GITLAB format:

| header 1 | header 2 |
| -------- | -------- |
| cell 1   | cell 2   |
| cell 3   | cell 4   |


reStructuredText format:

+----------+----------+
| header 1 | header 2 |
+==========+==========+
| cell 1   | cell 2   |
+----------+----------+
| cell 3   | cell 4   |
+----------+----------+
"""


