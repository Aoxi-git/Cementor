# The previously used image:
# image: registry.gitlab.com/yade-dev/docker-yade
#
# Five new images:
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_nogui
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_foam
# image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
# image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
# image: registry.gitlab.com/yade-dev/docker-yade:suse15
#
# Useful link to validator: https://gitlab.com/yade-dev/trunk/-/ci/lint


stages:
  - build
  - test
  - pages
  - deb

# If you want to compile everything also on merge_request, change this template.
.plaftorms_template: &platforms_definition
  only:
    - master
    - merge_request

# stage: cmake uses ccache for faster compilation. ccache works only with -DCHUNKSIZE=1
# Important: to get ccache to work an external volume must be mounted by gitlab-runner (in config file: /etc/gitlab-runner/config.toml)
#            into docker directory /root/.ccache. By default in /etc/gitlab-runner/config.toml there is already this line:
#               volumes = ["/cache"]
#            it must be replaced with:
#               volumes = ["/cache","/home/docker/ccache:/root/.ccache:rw"]
#            where /home/docker/ccache is the directory in the host with write access.
# See also : https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/configuration/advanced-configuration.md#example-2-mount-a-host-directory-as-a-data-volume

# Perhaps two more will added later
# 1.4. only: tags       Perhaps creating tags would trigger a build, e.g. tagging a new release?
# 1.5. only: schedules  For scheluded pipelines. Perhaps it will be e.g. for https://gitlab.com/yade-dev/trunk/issues/58
#                       It is possible to send an environment variable to the pipeline from the schedule. So here maybe a selection of
#                       what .deb package to build could be performed using an env variable.
# in merge_request use the faster  linker: ld.gold. We save 2 minutes on every build.
# in master        use the regular linker: ld.bfd.  Very rarely we might encounter linker errors. It's worth the faster build in merge_request.

.make_template: &make_definition
  <<: *platforms_definition
  stage: build
  script:
    - export GCC_COLORS="error=01;31:warning=01;35:note=01;36:range1=04;32:range2=04;34:locus=93:quote=07;96:fixit-insert=92:fixit-delete=91:diff-filename=01;91:diff-hunk=33:diff-delete=31:diff-insert=32"
    - export CXXFLAGS="-fdiagnostics-color=always $CXXFLAGS"
    - echo $CXXFLAGS
    - mkdir build && cd build
    - echo $EXTRA_CMAKE_ARGS
    - cmake -DSUFFIX=-ci -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=../install  $EXTRA_CMAKE_ARGS -DPYTHON_VERSION=3 -DDISABLE_SAVE_TEMPS=1 ..
    - ccache -s
    - export LINK_GOLD=$(case    $CI_PIPELINE_SOURCE in "merge_request_event") echo "20" ;; *) echo "10";; esac)
    - export LINK_REGULAR=$(case $CI_PIPELINE_SOURCE in "merge_request_event") echo "10" ;; *) echo "20";; esac)
    - ld --version
    - update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.gold" $LINK_GOLD
    - update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.bfd" $LINK_REGULAR
    - ld --version
    # 4pak has 64cores 256GB RAM, and has concurrent = 5 ← amount of simultaneous gitlab jobs
    # 6pak has 48cores 128GB RAM, and has concurrent = 3 , but 6pak must have a little smaller load than the maximum
    # 7pak has 48cores 128GB RAM, and has concurrent = 4
    # The goal is to maximize effciency while at the same time the occasionall very heavy jobs (recompilation where ccache can't help) must not bring down the server to halt.
    # So let's assume that JOBSUM*concurrent < 1.3*cores and examine how this works out.
    # Current measurements indicate that non-ccached recompilation full CI job is 34 minutes, while ccached one can be as low as 10 minutes.
    - export JOBSNUM=$(case $CI_RUNNER_DESCRIPTION in
        "y4pak") echo "17" ;;
        "c4pak") echo "17" ;;
        "y6pak") echo "19" ;;
        "c6pak") echo "19" ;;
        "y7pak") echo "16" ;;
        "c7pak") echo "16" ;;
        "yade-runner") echo "12" ;;
        "yade-runner-01") echo "1" ;;
        *) echo "8";;
        esac)
    - echo $JOBSNUM
    - echo "max_size = 200.0G" > ~/.ccache/ccache.conf
    - make -j $JOBSNUM
    - make install
    - make clean
    - ccache -s
  tags:
    - fast

.artifacts_template: &artifacts_definition
  artifacts:
    paths:
      - install
    expire_in: 2 weeks

# 2.1 build stage: ubuntu 16.04
make_16_04:
  <<: *make_definition
  <<: *artifacts_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04

make_18_04:
  <<: *make_definition
  artifacts:
    paths:
      - install
      - build
    expire_in: 2 weeks
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04

make_stretch:
  <<: *make_definition
  <<: *artifacts_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch

make_buster:
  <<: *make_definition
  <<: *artifacts_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-buster

make_bullseye:
  <<: *make_definition
  <<: *artifacts_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye

make_suse15:
  <<: *make_definition
  <<: *artifacts_definition
  before_script:
    - export CXXFLAGS="-Wno-int-in-bool-context -Wno-comment $CXXFLAGS"
    - echo $CXXFLAGS
  image: registry.gitlab.com/yade-dev/docker-yade:suse15

make_18_04_nogui:
  <<: *make_definition
  <<: *artifacts_definition
  before_script:
    - export EXTRA_CMAKE_ARGS="-DENABLE_GUI=OFF $EXTRA_CMAKE_ARGS"
    - echo $EXTRA_CMAKE_ARGS
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_nogui

make_clang:
  <<: *make_definition
  <<: *artifacts_definition
  before_script:
    - export CC="/usr/bin/clang-10"
    - export CXX="/usr/bin/clang++-10"
    # We should escape disabling features for the clang-build. Clang should work exactly like gcc.
    - export EXTRA_CMAKE_ARGS="-DENABLE_THERMAL=0 -DENABLE_TWOPHASEFLOW=0 -DENABLE_USEFUL_ERRORS=0 $EXTRA_CMAKE_ARGS"
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye

# 3.1. test stage
.test_template: &test_definition
  <<: *platforms_definition
  stage: test
  script:
    - install/bin/yade-ci --test
    - cat /etc/os-release
  timeout: 15 minutes

test_16_04:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
  dependencies:
    - make_16_04
  needs: ["make_16_04"]

test_18_04:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  dependencies:
    - make_18_04
  needs: ["make_18_04"]

test_stretch:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
  dependencies:
    - make_stretch
  needs: ["make_stretch"]

test_buster:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
  dependencies:
    - make_buster
  needs: ["make_buster"]

test_bullseye:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
  dependencies:
    - make_bullseye
  needs: ["make_bullseye"]

test_suse15:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:suse15
  dependencies:
    - make_suse15
  needs: ["make_suse15"]

test_18_foam:
  stage: test
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_foam
  only:
    - master
    - merge_request
  dependencies:
    - make_18_04
  needs: ["make_18_04"]
  timeout: 15 minutes
  script:
    - cat /etc/os-release
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - pwd
    - scripts/checks-and-tests/testOpenFoam.sh

test_18_04_nogui:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_nogui
  dependencies:
    - make_18_04_nogui
  needs: ["make_18_04_nogui"]


# 3.2. check stage
.check_template: &check_definition
  <<: *platforms_definition
  stage: test
#  before_script:
#    - export OMPI_MCA_rmaps_base_oversubscribe=1
#    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
#    - export OMPI_MCA_mpi_yield_when_idle=1 #degraded mode when oversubscribing (https://www.open-mpi.org/faq/?category=running#oversubscribing)
  script:
    - install/bin/yade-ci --checks
  timeout: 15 minutes

check_16_04:
  <<: *check_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
  dependencies:
    - make_16_04
  needs: ["make_16_04"]

check_18_04:
  <<: *check_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  dependencies:
    - make_18_04
  needs: ["make_18_04"]

check_stretch:
  <<: *check_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
  dependencies:
    - make_stretch
  needs: ["make_stretch"]

check_buster:
  <<: *check_definition
  before_script:
    - export OMPI_MCA_rmaps_base_oversubscribe=1
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - export OMPI_MCA_mpi_yield_when_idle=1 #degraded mode when oversubscribing (https://www.open-mpi.org
  image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
  dependencies:
    - make_buster
  needs: ["make_buster"]

check_bullseye:
  <<: *check_definition
  before_script:
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
  dependencies:
    - make_bullseye
  needs: ["make_bullseye"]

check_suse15:
  <<: *check_definition
  image: registry.gitlab.com/yade-dev/docker-yade:suse15
  dependencies:
    - make_suse15
  needs: ["make_suse15"]


# currently doc is build only on ubuntu 18.04. Without .doc_template. We may fix this later.
# 4. doc stage
doc_18_04:
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  stage: test
  only:
    - master
    - merge_request
  script:
    - cd build
    - xvfb-run -s "-screen 0 1600x1200x24" make doc
  dependencies:
    - make_18_04
  needs: ["make_18_04"]
  artifacts:
    paths:
      - install


# 5. pages stage; uploads documentation to the website
pages:
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  stage: pages
  only:
    - master
  script:
    - mv install/share/doc/yade-ci/html public
    - mv install/share/doc/yade-ci/Yade.pdf public
    - mv install/share/doc/yade-ci/Yade.epub public
  dependencies:
    - doc_18_04
  needs: ["doc_18_04"]
  artifacts:
    paths:
      - public

# 6. build debian packages
.deb_template: &deb_definition
  stage: deb
  only:
    - master
  script:
    - cd $CI_PROJECT_DIR/deb/yadedaily
    # see comments in make_template, but here give smaller JOBSNUM because this runs on master only, so the cores can be better utilized on merge_request
    - export JOBSNUM=$(case $CI_RUNNER_DESCRIPTION in
        "y4pak") echo "11" ;;
        "c4pak") echo "11" ;;
        "y6pak") echo "12" ;;
        "c6pak") echo "12" ;;
        "y7pak") echo "10" ;;
        "c7pak") echo "10" ;;
        "yade-runner") echo "12" ;;
        "yade-runner-01") echo "1" ;;
        *) echo "8";;
        esac)
    - echo $JOBSNUM
    - export CCACHE_DIR=/root/.ccache
    - ccache -s
    - DEB_BUILD_OPTIONS=noddebs dpkg-buildpackage -j$JOBSNUM
    - rm -rf $CI_PROJECT_DIR/deb/yadedaily
    - ls -l $CI_PROJECT_DIR/deb
    - ccache -s
  dependencies: []
  artifacts:
    paths:
      - ./deb
    expire_in: 5 day
  tags:
    - fast

deb_bullseye:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "bullseye"

deb_buster:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "buster"

deb_stretch:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "stretch"

deb_bionic:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "bionic"

deb_xenial:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "xenial"
