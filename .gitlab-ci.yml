# The previously used image:
# image: registry.gitlab.com/yade-dev/docker-yade
#
# Five new images:
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_nogui
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_foam
# image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
# image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
# image: registry.gitlab.com/yade-dev/docker-yade:suse15
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-i386
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-mips64el # crashes, as predicted by warnings -Wcast-align
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-ppc64el
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-arm64
#
# Useful link to validator: https://gitlab.com/yade-dev/trunk/-/ci/lint


stages:
  - deb

# See: https://docs.gitlab.com/ee/ci/yaml/#retry
# Skip repeats when:
#     - always: Retry on any failure (default).
#     - missing_dependency_failure: Retry if a dependency was missing.
#     - runner_unsupported: Retry if the runner was unsupported.
#     - unmet_prerequisites: Retry if the job failed to complete prerequisite tasks.
.gitlab_runner_retry_template: &gitlab_runner_retry_definition
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure
      - stale_schedule
      - job_execution_timeout
      - archived_failure
      - scheduler_failure
      - data_integrity_failure

# 6. build debian packages
.deb_template: &deb_definition
  stage: deb
  <<: *gitlab_runner_retry_definition
  only:
    - master
    - merge_requests
  script:
    - export PYTHONUNBUFFERED=1
    - cd $CI_PROJECT_DIR/deb/yadedaily
    # see comments in make_template, but here give smaller JOBSNUM because this runs on master only, so the cores can be better utilized on merge_request
    - export JOBSNUM=$(case $CI_RUNNER_DESCRIPTION in
        "y4pak") echo "11" ;;
        "c4pak") echo "11" ;;
        "y6pak") echo "12" ;;
        "c6pak") echo "12" ;;
        "y7pak") echo "10" ;;
        "c7pak") echo "10" ;;
        "y8pak") echo "5" ;;
        "c8pak") echo "5" ;;
        "y9pak") echo "5" ;;
        "c9pak") echo "5" ;;
        "yade-runner") echo "12" ;;
        "yade-runner-01") echo "1" ;;
        *) echo "8";;
        esac)
    - echo $JOBSNUM
    - export CCACHE_DIR=/root/.ccache
    - ccache -s
    - DEB_BUILD_OPTIONS=noddebs dpkg-buildpackage -j$JOBSNUM
    - rm -rf $CI_PROJECT_DIR/deb/yadedaily
    - ls -l $CI_PROJECT_DIR/deb
    - ccache -s
  dependencies: []
  # this line is to trigger deb building earlier; the "make_minimal" is supposed to finish fastest of all builds.
  artifacts:
    paths:
      - ./deb
    expire_in: 5 day
  tags:
    - fast

deb_bullseye:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "bullseye"

deb_buster:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "buster"

deb_stretch:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "stretch"

deb_xenial:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "xenial"

deb_bionic:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "bionic"

deb_focal:
  <<: *deb_definition
  image: registry.gitlab.com/yade-dev/docker-yade:ubuntu20.04
  before_script:
    - rm -rf ./deb
    - ./scripts/ppa_ci/builddeb.py -d "focal"
