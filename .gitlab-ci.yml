# The previously used image:
# image: registry.gitlab.com/yade-dev/docker-yade
#
# Five new images:
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu16.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_nogui
# image: registry.gitlab.com/yade-dev/docker-yade:ubuntu18.04_foam
# image: registry.gitlab.com/yade-dev/docker-yade:debian-stretch
# image: registry.gitlab.com/yade-dev/docker-yade:debian-buster
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
# image: registry.gitlab.com/yade-dev/docker-yade:suse15
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-i386     # crashes in CI, see https://gitlab.com/yade-dev/trunk/-/issues/239
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-mips64el # crashes, as predicted by warnings -Wcast-align
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-ppc64el
# image: registry.gitlab.com/yade-dev/docker-yade:debian-bullseye-arm64
# image: registry.gitlab.com/yade-dev/docker-yade:archlinux-current
#
# Useful link to validator: https://gitlab.com/yade-dev/trunk/-/ci/lint


stages:
  - build
  - test
  - pages
  - deb

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# See: https://docs.gitlab.com/ee/ci/yaml/#retry
# Skip repeats when:
#     - always: Retry on any failure (default).
#     - missing_dependency_failure: Retry if a dependency was missing.
#     - runner_unsupported: Retry if the runner was unsupported.
#     - unmet_prerequisites: Retry if the job failed to complete prerequisite tasks.
.gitlab_runner_retry_template: &gitlab_runner_retry_definition
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure
      - stale_schedule
      - job_execution_timeout
      - archived_failure
      - scheduler_failure
      - data_integrity_failure

# If you want to compile everything also on merge_request, change this template.
.plaftorms_template: &platforms_definition
  only:
    - master
    - merge_request

.skip_WIP_template: &skip_WIP
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/

.skip_WIP_and_Draft_template: &skip_WIP_and_Draft
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/
      - $CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/

.skip_wip_test_template_nogui: &skip_GUI_TEST
  before_script: # there can be only one before_script: so if you need NO_GUI and before_script: this line has to be pasted there
    - export NO_GUI="NO_GUI"

# stage: cmake uses ccache for faster compilation. ccache works only with -DCHUNKSIZE=1
# Important: to get ccache to work an external volume must be mounted by gitlab-runner (in config file: /etc/gitlab-runner/config.toml)
#            into docker directory /root/.ccache. By default in /etc/gitlab-runner/config.toml there is already this line:
#               volumes = ["/cache"]
#            it must be replaced with:
#               volumes = ["/cache","/home/docker/ccache:/root/.ccache:rw"]
#            where /home/docker/ccache is the directory in the host with write access.
# See also : https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/configuration/advanced-configuration.md#example-2-mount-a-host-directory-as-a-data-volume

# Perhaps two more will added later
# 1.4. only: tags       Perhaps creating tags would trigger a build, e.g. tagging a new release?
# 1.5. only: schedules  For scheluded pipelines. Perhaps it will be e.g. for https://gitlab.com/yade-dev/trunk/issues/58
#                       It is possible to send an environment variable to the pipeline from the schedule. So here maybe a selection of
#                       what .deb package to build could be performed using an env variable.
# in merge_request use the faster  linker: ld.gold. We save 2 minutes on every build.
# in master        use the regular linker: ld.bfd.  Very rarely we might encounter linker errors. It's worth the faster build in merge_request.

.make_template: &make_definition
  <<: *platforms_definition
  <<: *gitlab_runner_retry_definition
  stage: build
  script:
    - cd ./data
    - git log --oneline -n 5
    - cd ..
    - export PYTHONUNBUFFERED=1
    - mkdir install
    # the command 'git diff -w --shortstat' counts the number of changes. The '-w' tells it to ignore whitespace.
    - if [[ -e "/usr/bin/clang-format" ]] ; then
          export CLANG_VERSION=`clang-format --version | sed -e 's/^.*version\s\([0-9]\+\).*$/\1/g'` ;
          if [[ ${CHECK_FORMAT} == "CHECK_FORMAT" && ${CLANG_VERSION} -ge "10" ]] ; then
                  echo -e "\n\e[92m===\nclang-format version is $CLANG_VERSION \n===\e[0m\n" ;
                  scripts/clang-formatter.sh ./ ;
                  export CHANGED_LINES=`git diff -w --shortstat | sed -e 's/^.*,\s\([0-9]\+\)\sdeletion.*$/\1/g'` ;
                  echo "CHANGED_LINES = "$CHANGED_LINES ;
                  if [[ ${CHANGED_LINES} -ge "100" ]] ; then
                          echo -e "\n\e[91m===\n*** ERROR *** clang-format produces very different output.\nYou can use command\n\n    scripts/clang-formatter.sh \$YOUR_FILE\n\nto fix this\nIt is possible that some other files will be modified, because apparently different versions of clang-format have (very small) differences in the output.\n===\e[0m\n \n";
                          echo -e "\n\e[96m===\n*** NOTE *** if your formatting is better that what clang-format provides, you can use:\n\n    // clang-format off\n    ......\n    // clang-format on\n\nlike it is done with YADE_CLASS_* macros in all .hpp files.\n===\e[0m\n" ;
                          echo -e "\n \n\e[95m*** See the most affected files below ***\e[0m\n \n" ;
                          git diff --stat ;
                          git diff -w --stat ;
                          echo -e "\n \n\e[95mLines\nAdded | Removed\e[0m\n" ;
                          git diff --numstat ;
                          echo -e "\n \n\e[95m*** Full 'git diff' is in artifacts path ./install/reformat.txt ***\e[0m\n" ;
                          echo -e "\e[95m*** Apart from 'scripts/clang-formatter.sh ./', you also can download the diff and use the following command ***\e[0m\n" ;
                          echo -e "\e[95m    patch -p1 < ./reformat.txt\e[0m\n \n" ;
                          git diff > ./install/reformat.txt ;
                          exit 1 ;
                  else
                          echo -e "\n\e[92m===\nclang-format check OK\n===\e[0m\n" ;
                  fi;
          else
                  echo -e "\n\e[93m===\nSkipping  clang-format check (disabled or version too old)\n===\e[0m\n" ;
          fi;
      else
          echo -e "\n\e[93m===\nSkipping  clang-format check (can't find clang-format)\n===\e[0m\n" ;
      fi;
    # remove any clang formatting changes
    - git diff -w
    - git reset --hard
    - git diff
    - git status
    - git log --oneline -n 5
    # OK source code is as it should be.
    - export GCC_COLORS="error=01;31:warning=01;35:note=01;36:range1=04;32:range2=04;34:locus=93:quote=07;96:fixit-insert=92:fixit-delete=91:diff-filename=01;91:diff-hunk=33:diff-delete=31:diff-insert=32"
    - export CXXFLAGS="-fdiagnostics-color=always $CXXFLAGS"
    - echo $CXXFLAGS
    - mkdir build && cd build
    - echo $EXTRA_CMAKE_ARGS
    - cmake -DSUFFIX=-ci -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=../install  $EXTRA_CMAKE_ARGS -DPYTHON_VERSION=3 -DDISABLE_SAVE_TEMPS=1 ..
    - export LINK_GOLD=$(case    $CI_PIPELINE_SOURCE in "merge_request_event") echo "20" ;; *) echo "10";; esac)
    - export LINK_REGULAR=$(case $CI_PIPELINE_SOURCE in "merge_request_event") echo "10" ;; *) echo "20";; esac)
    - ld --version
    - if grep -q "Arch Linux" /etc/issue; then echo "skip ld setting"; else update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.gold" $LINK_GOLD   ; fi
    - if grep -q "Arch Linux" /etc/issue; then echo "skip ld setting"; else update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.bfd" $LINK_REGULAR ; fi
    - ld --version
    # 4pak has 64cores 256GB RAM, and has concurrent = 5 ‚Üê amount of simultaneous gitlab jobs
    # 6pak has 48cores 128GB RAM, and has concurrent = 3 , but 6pak must have a little smaller load than the maximum
    # 7pak has 48cores 128GB RAM, and has concurrent = 4
    # The goal is to maximize effciency while at the same time the occasionall very heavy jobs (recompilation where ccache can't help) must not bring down the server to halt.
    # So let's assume that JOBSUM*concurrent < 1.3*cores and examine how this works out.
    # Current measurements indicate that non-ccached recompilation full CI job is 34 minutes, while ccached one can be as low as 10 minutes.
    - export JOBSNUM=$(case $CI_RUNNER_DESCRIPTION in
        "y4pak") echo "12" ;;
        "c4pak") echo "12" ;;
        "y6pak") echo "7" ;;
        "c6pak") echo "7" ;;
        "y7pak") echo "7" ;;
        "c7pak") echo "7" ;;
        "y8pak") echo "5"  ;;
        "c8pak") echo "5"  ;;
        "y9pak") echo "5"  ;;
        "c9pak") echo "5"  ;;
        "atak0") echo "2"  ;;
        "yade-runner") echo "12" ;;
        "yade-runner-01") echo "1" ;;
        *) echo "5";;
        esac)
    - echo $JOBSNUM
    - if [[ ${CI_RUNNER_DESCRIPTION} == "y8pak" || ${CI_RUNNER_DESCRIPTION} == "c8pak" || ${CI_RUNNER_DESCRIPTION} == "y9pak" || ${CI_RUNNER_DESCRIPTION} == "c9pak" ]] ; then export MAX_CCACHE="500.0G"; else export MAX_CCACHE="200.0G"; fi
    - if [[ ${CI_RUNNER_DESCRIPTION} == "atak0" ]] ; then export MAX_CCACHE="100.0G"; fi
    - echo "max_size = ${MAX_CCACHE}" > ~/.ccache/ccache.conf
    - ccache -s
    - make install -j $JOBSNUM
    - make clean
    - ccache -s
    - cd ../build
    - cd ..
    - if [[ ${TESTS_AFTER_MAKE} == "TESTS_AFTER_MAKE" ]] ; then echo -e "\n===\n\e[44mSingle core test yade --test\e[0m\n===\n"; install/bin/yade-ci --test ; fi
    - if [[ ${TESTS_AFTER_MAKE} == "TESTS_AFTER_MAKE" ]] ; then echo -e "\n===\n\e[44mSingle core check yade --checkall\e[0m\n===\n"; install/bin/yade-ci --checkall; fi
    - if [[ ${TESTS_AFTER_MAKE} == "TESTS_AFTER_MAKE" ]] ; then echo -e "\n===\n\e[44mParallel check yade -j5 --checkall\e[0m\n===\n"; install/bin/yade-ci -j5 --checkall; fi
    - if [[ ${TESTS_AFTER_MAKE} == "TESTS_AFTER_MAKE" ]] ; then xvfb-run -a -s "-screen 0 1600x1200x24" scripts/checks-and-tests/gui/testGui.sh; fi
    - if [[ ${TESTS_AFTER_MAKE} == "TESTS_AFTER_MAKE" ]] ; then install/bin/yade-ci --quickperformance -j8; fi
    - cat /etc/os-release
    - if grep -q "Arch Linux" /etc/issue; then /usr/sbin/uname -m; else  /usr/bin/dpkg --print-architecture ; fi
    - echo -e "\n\e[93m===\n(make_minimal only) clang-format reports CHANGED_LINES = "$CHANGED_LINES"\n===\e[0m\n";
  tags:
    - fast

.artifacts_template: &artifacts_definition
  artifacts:
    when: always
    paths:
      - install
    expire_in: 2 weeks

# 2.1 build stage: ubuntu 16.04


make_bookworm:
  <<: *make_definition
  <<: *artifacts_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm

make_debug:
  <<: *make_definition
  <<: *skip_WIP_and_Draft
  artifacts:
    when: always
    paths:
      - screenshots
  before_script:
    # there can be only one before_script:, so the line below cannot be in a separate template
    - export TESTS_AFTER_MAKE="TESTS_AFTER_MAKE"
    - export EXTRA_CMAKE_ARGS="-DDEBUG=ON $EXTRA_CMAKE_ARGS"
    - echo $EXTRA_CMAKE_ARGS
    - export CXXFLAGS="-O2 $CXXFLAGS"
    - apt-cache policy libopenblas0 libcgal-dev
    - wget https://snapshot.debian.org/archive/debian/20210418T143507Z/pool/main/o/openblas/libopenblas-dev_0.3.13%2Bds-3_amd64.deb
    - wget https://snapshot.debian.org/archive/debian/20210418T143507Z/pool/main/o/openblas/libopenblas-pthread-dev_0.3.13%2Bds-3_amd64.deb
    - wget https://snapshot.debian.org/archive/debian/20210418T143507Z/pool/main/o/openblas/libopenblas0-pthread_0.3.13%2Bds-3_amd64.deb
    - wget https://snapshot.debian.org/archive/debian/20210418T143507Z/pool/main/o/openblas/libopenblas0_0.3.13%2Bds-3_amd64.deb
    - wget https://snapshot.debian.org/archive/debian-debug/20210418T142815Z/pool/main/o/openblas/libopenblas0-pthread-dbgsym_0.3.13%2Bds-3_amd64.deb
    - dpkg -i libopenblas-dev_0.3.13+ds-3_amd64.deb libopenblas-pthread-dev_0.3.13+ds-3_amd64.deb libopenblas0-pthread-dbgsym_0.3.13+ds-3_amd64.deb libopenblas0-pthread_0.3.13+ds-3_amd64.deb libopenblas0_0.3.13+ds-3_amd64.deb
    - apt-cache policy libopenblas0 libcgal-dev
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
  tags:
    - oldhardware

# 3.1. test stage
.test_template: &test_definition
  <<: *platforms_definition
  <<: *gitlab_runner_retry_definition
  stage: test
  script:
    - cd ./data
    - git log --oneline -n 5
    - cd ..
    - export PYTHONUNBUFFERED=1
    - install/bin/yade-ci --test
    - if [[ ${NO_GUI} == "NO_GUI" ]] ; then echo -e "\n\e[93m===\nSkipping GUI test.\n===\e[0m\n"; else xvfb-run -a -s "-screen 0 1600x1200x24" scripts/checks-and-tests/gui/testGui.sh; fi
    - install/bin/yade-ci --quickperformance -j8
    - cat /etc/os-release
    - if grep -q "Arch Linux" /etc/issue; then /usr/sbin/uname -m; else  /usr/bin/dpkg --print-architecture ; fi
  timeout: 30 minutes
  artifacts:
    when: always
    paths:
      - screenshots


test_bookworm:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
  dependencies:
    - make_bookworm
  needs: ["make_bookworm"]

test_debug:
  <<: *test_definition
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
  dependencies:
    - make_debug
  needs: ["make_debug"]


# 3.2. check stage
.check_template: &check_definition
  <<: *platforms_definition
  <<: *gitlab_runner_retry_definition
  stage: test
#  before_script:
#    - export OMPI_MCA_rmaps_base_oversubscribe=1
#    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
#    - export OMPI_MCA_mpi_yield_when_idle=1 #degraded mode when oversubscribing (https://www.open-mpi.org/faq/?category=running#oversubscribing)
  script:
    - cd ./data
    - git log --oneline -n 5
    - cd ..
    - export PYTHONUNBUFFERED=1
    - echo -e "\n===\n\e[44mSingle core check yade --checkall\e[0m\n===\n"
    - install/bin/yade-ci --checkall
    - echo -e "\n===\n\e[44mParallel check yade -j5 --checkall\e[0m\n===\n"
    - install/bin/yade-ci -j5 --checkall
    - cat /etc/os-release
    - if grep -q "Arch Linux" /etc/issue; then /usr/sbin/uname -m; else  /usr/bin/dpkg --print-architecture ; fi
  timeout: 35 minutes

check_bookworm:
  <<: *check_definition
  before_script:
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
  dependencies:
    - make_bookworm
  needs: ["make_bookworm"]

check_debug:
  <<: *check_definition
  before_script:
  image: registry.gitlab.com/yade-dev/docker-yade:debian-bookworm
  dependencies:
    - make_debug
  needs: ["make_debug"]



